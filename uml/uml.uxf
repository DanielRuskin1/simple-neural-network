<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>584</x>
      <y>136</y>
      <w>440</w>
      <h>624</h>
    </coordinates>
    <panel_attributes>NeuralNetwork&lt;class Activation, class Cost&gt;
--
# Weights and biases to be stored with one matrix
# for each layer, in the following format:
# weights[i](j, k) = the weight of the connection
#                           from the jth node in the ith layer
#                           to the kth node in the (i - 1)th
#                           layer.
- weights: VecOfMats
- biases: VecOfColVecs
- 
--
# Ctor accepts neural network architecture in array
# format.
# An array [2,4,4,2] represents the following network:
#    Input layer with 2 nodes
#    Hidden layer with 4 notes
#    Hidden layer with 4 notes
#    Output layer with 2 nodes
# The ctor will initialize the weights/biases with small
# random values to represent this network.
# Currently, all networks are simple feed-forward networks
# that have all nodes in the ith layer connected to all nodes
# in the (i + 1)th layer.
+ NeuralNetwork(config: const VecOfInts&amp;)

# Performs feed-forward and returns matrices with the
# resulting activations and weighed inputs.
# In each output matrix, mat(i, j) represents the jth node in the ith layer.
+ const feedForward(input: const arma::colvec&amp;, 
                                 out_activations: std::unique_ptr&lt;VecOfColVecs&gt;&amp;, 
                                 out_weighted_inputs: std::unique_ptr&lt;VecOfColVecs&gt;&amp;) 

# Simpler interface to feedForward function.
# Instead of returning all of the activations and weighted inputs,
# only returns the output layer activations.
# Useful for actual predictions.
+ const predict(input: arma::colvec): std::unique_ptr&lt;arma::colvec&gt;

struct NodeProperties {
  double: weight;
  double: bias;
};

# Get/set weight and bias of each node via the NodeProperties struct.
+ const getWeights(layer: int): const arma::mat&amp;
+ const getBiases(layer: int): const arma::mat&amp;
+ setNodeProperties(layer: int, node: int, props: const NodeProperties&amp;)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1056</x>
      <y>136</y>
      <w>504</w>
      <h>264</h>
    </coordinates>
    <panel_attributes>NeuralNetworkTrainer&lt;class Activation, class Cost&gt;
--
+ typedef NeuralNetwork&lt;Activation, Cost&gt; NeuralNetworkLoc;
--
- network: std::shared_ptr&lt;NeuralNetworkLoc&gt;
- minibatch_size: int
- num_epochs: int
--
+ NodeProperties(network: std::shared_ptr&lt;NeuralNetworkLoc&gt;, 
                            mini_batch_size: int,
                            num_epochs: int)

# Runs Stochastic Gradient Descent with the provided minibatch_size 
# for the specified number of epochs.
# Updates the neural network after each iteration.
# Makes use of helper methods.
+ const trainNetwork()

- const calcGradients(activations: const VecOfColVecs&amp;,
                                  weighted_inputs: const VecOfColVecs&amp;,
                                  out_weight_gradients: std::unique_ptr&lt;VecOfMats&gt;&amp;,
                                  out_bias_gradients: std::unique_ptr&lt;VecOfColVecs&gt;&amp;) </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>240</x>
      <y>136</y>
      <w>288</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>Utils
--
typedef std::vector&lt;arma::mat&gt; VecOfMats;
typedef std::vector&lt;arma::colvec&gt; VecOfColVecs;
typedef std::vector&lt;int&gt; VecOfInts;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1056</x>
      <y>416</y>
      <w>448</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>SigmoidActivation
-
+ static eval(input: const arma::colvec&amp;): std::unique_ptr&lt;arma::colvec&gt;
+ static evalPrime(input: const arma::colvec&amp;): std::unique_ptr&lt;arma::colvec&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1056</x>
      <y>536</y>
      <w>616</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>MeanSquaredErrorCost
-
+ static eval(predict: const arma::colvec&amp;, correct: const arma::colvec&amp;): std::unique_ptr&lt;arma::colvec&gt;
+ static evalPrime(predict: const arma::colvec&amp;, correct: const arma::colvec&amp;): std::unique_ptr&lt;arma::colvec&gt;</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
